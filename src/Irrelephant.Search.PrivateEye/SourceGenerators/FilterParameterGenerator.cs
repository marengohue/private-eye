using System.Text;
using Azure.Search.Documents.Indexes;
using Microsoft.CodeAnalysis;

namespace Irrelephant.Search.PrivateEye.SourceGenerators;

[Generator]
public class FilterParameterGenerator : PrivateEyeGeneratorBase
{
    protected override void GenerateComponent(StringBuilder builder, ITypeSymbol indexDocumentType)
    {
        builder.AppendLine("// <auto-generated>");
        builder.AppendLine("using System;");
        builder.AppendLine("using Irrelephant.Search.PrivateEye.Core.Filter;");

        builder.AppendLine();
        if (GetComponentNamespace(indexDocumentType) is { } ns)
            builder.Append($"namespace {ns};");

        builder.AppendLine();

        builder.Append("public record ");
        var parametersRecordTypeName = indexDocumentType.Name + "FilterParameters";

        builder.Append(parametersRecordTypeName);
        builder.AppendLine("() {");
        GenerateProperties(builder, indexDocumentType);
        builder.AppendLine("}");
        builder.AppendLine();
    }

    private void GenerateProperties(StringBuilder builder, ITypeSymbol symbol)
    {
        var propertyBuilder = symbol
            .GetMembers()
            .Where(it => it.Kind == SymbolKind.Property)
            .Cast<IPropertySymbol>()
            .SelectMany(ExtractTargetProperties)
            .Aggregate(new StringBuilder(), (propBuilder, propInfo) =>
            {
                var (_, property, isSearchable) = propInfo!.Value;
                var paramTypeName = isSearchable
                    ? "SearchableFilterField<" + property.Type.Name + ">"
                    : "SimpleFilterField<" + property.Type.Name + ">";
                GenerateParameterProperty(propBuilder, property.Name, paramTypeName);
                return propBuilder;
            });

        builder.Append(propertyBuilder);
    }

    private static IEnumerable<(AttributeData, IPropertySymbol, bool)?> ExtractTargetProperties(IPropertySymbol property)
    {
        return property
            .GetAttributes()
            .Select<AttributeData, (AttributeData, IPropertySymbol, bool)?>(attribute =>
                attribute.AttributeClass?.Name switch
                {
                    nameof(SimpleFieldAttribute) when IsFilterableFieldAttribute(attribute)
                        => (attribute, property, false),
                    nameof(SearchableFieldAttribute) when IsFilterableFieldAttribute(attribute)
                        => (attribute, property, true),
                    _ => null
                }
            )
            .Where(it => it is not null);
    }

    private static bool IsFilterableFieldAttribute(AttributeData data) =>
        data.NamedArguments
            .Any(it => it is { Key: nameof(SimpleFieldAttribute.IsFilterable), Value.Value: true });

    private static void GenerateParameterProperty(StringBuilder propBuilder, string propertyName, string paramTypeName)
    {
        propBuilder.Append("    public ");
        propBuilder.Append(paramTypeName);
        propBuilder.Append(' ');
        propBuilder.Append(propertyName);
        propBuilder.AppendLine(" { get; init; } = new();");
    }

    protected override string GetComponentName() => "FilterParameters";

}
